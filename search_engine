#define FILE_EXTENSION ".txt"
#define MAX 100005
#include<fstream>
#include<string>
#include<cstring>
#include<vector>
#include<iostream>
#include<sstream>
#include<cstring>
//#include<ctime>

using namespace std; 
//g++ -std=c++17 -o essay-search.exe ./*.cpp 
//./essay-search.exe data query.txt my_output.txt
//./essay-search.exe data-more query-more.txt my_output.txt

// C++ implementation of search and insert
// operations on Trie

const int ALPHABET_SIZE = 26;
int answer_set[MAX+1];
int query_mode;
ofstream ofs;


// trie node
struct TrieNode
{
	struct TrieNode *children[ALPHABET_SIZE];

	// isEndOfWord is true if the node represents
	// end of a word
	bool isEndOfWord;
};

// Returns new trie node (initialized to NULLs)
struct TrieNode *getNode(void)
{
	struct TrieNode *pNode = new TrieNode;

	pNode->isEndOfWord = false;

	for (int i = 0; i < ALPHABET_SIZE; i++)
		pNode->children[i] = NULL;

	return pNode;
}

// If not present, inserts key into trie
// If the key is prefix of trie node, just
// marks leaf node
void insert(struct TrieNode *root, string key)
{
	struct TrieNode *pCrawl = root;

	for (int i = 0; i < key.length(); i++)
	{
		int index = key[i] - 'a';
		if (!pCrawl->children[index])
			pCrawl->children[index] = getNode();

		pCrawl = pCrawl->children[index];
	}

	// mark last node as leaf
	pCrawl->isEndOfWord = true;
}

// Returns true if key presents in trie, else
// false
bool search(struct TrieNode *root, string key)
{
	struct TrieNode *pCrawl = root;

	for (int i = 0; i < key.length(); i++)
	{
		int index = key[i] - 'a';
		if (!pCrawl->children[index])
			return false;

		pCrawl = pCrawl->children[index];
	}

	return (pCrawl->isEndOfWord);
}

bool prefix_search(struct TrieNode *root, string key)
{
	struct TrieNode *pCrawl = root;

	for (int i = 0; i < key.length(); i++)
	{
		int index = key[i] - 'a';
		if (!pCrawl->children[index])
			return false;

		pCrawl = pCrawl->children[index];
	}

	return true;
}


struct TrieNode *root[MAX+1];
struct TrieNode *root_reverse[MAX+1];
string Title_set[MAX+1];
//----------------------------------------------------------------

// Utility Func

// string parser : output vector of strings (words) after parsing
vector<string> word_parse(vector<string> tmp_string){
	vector<string> parse_string;
	for(auto& word : tmp_string){
		string new_str;
    	for(auto &ch : word){
			if(isalpha(ch))
				new_str.push_back(ch);
		}
		parse_string.emplace_back(new_str);
	}
	return parse_string;
}

vector<string> split(const string& str, const string& delim) {
	vector<string> res;
	if("" == str) return res;
	//先將要切割的字串從string型別轉換為char*型別
	char * strs = new char[str.length() + 1] ; //不要忘了
	strcpy(strs, str.c_str());

	char * d = new char[delim.length() + 1];
	strcpy(d, delim.c_str());

	char *p = strtok(strs, d);
	while(p) {
		string s = p; //分割得到的字串轉換為string型別
		res.push_back(s); //存入結果陣列
		p = strtok(NULL, d);
	}

	return res;
}
//----------------------------------------------------------------
//input & output file

string trans(string word){
	int length = word.length();
	string copy = word;

	for(int i=0; i<length; i++){
		if(copy[i] >= 'A' && copy[i] <='Z') copy[i]+=32;
	}

	return copy;
}

void query_judge(vector<string> content){
	string word_trans;
	query_mode = 0;
	bool result;

	for(auto &word : content){
		
		if(word[0] == '"'){
			word_trans = trans(word.substr(1, word.size()-2));
			for(int i=0; i<=MAX; i++){
				result = search(root[i], word_trans);
				if(query_mode == 1){
					if(result == false)answer_set[i] = 0;
				}else{
					if(result == true)answer_set[i] = 1;
				}
			}

		}else if('a' <= word[0] && word[0]<= 'z' ||'A' <= word[0] && word[0]<= 'Z'){
			for(int i=0; i<=MAX; i++){
				result = prefix_search(root[i], trans(word));
				if(query_mode == 1){
					if(result == false)answer_set[i] = 0;
				}else{
					if(result == true)answer_set[i] = 1;
				}
			}

		}else if(word[0] == '*'){
			word_trans = trans(word.substr(1, word.size()-2));
			reverse(word_trans.begin(), word_trans.end());

			for(int i=0; i<=MAX; i++){
				result = prefix_search(root_reverse[i], word_trans);
				if(query_mode == 1){
					if(result == false)answer_set[i] = 0;
				}else{
					if(result == true)answer_set[i] = 1;
				}
			}

		}else if(word[0] == '+'){
			query_mode = 1;

		}else if(word[0] == '/'){
			query_mode = 2;
		}
	}
}
void write_file(string data_dir, string query, string output, string ans){
	ofs << ans << endl;
}

void read_data(string data_dir, string query, string output){
	string file, title_name, tmp;
	fstream fi;
	vector<string> tmp_string;
	stringstream ss;
	string now;

	for(int i=0; i<=MAX; i++){
		ss.clear();
		ss << i;
		ss >> now;

		fi.open((data_dir + now + FILE_EXTENSION).c_str(), ios::in);
		if(fi.is_open()){
			getline(fi, Title_set[i]);

			//title
			tmp_string = split(Title_set[i], " ");
			vector<string> title = word_parse(tmp_string);
			for(auto &word : title){
				string lower_case_word = trans(word);
				insert(root[i], lower_case_word);

				reverse(word.begin(), word.end());
				string lower_case_word2 = trans(word);
				insert(root_reverse[i], lower_case_word2);
			}
			
			//content
			while(getline(fi, tmp)){

				tmp_string = split(tmp, " ");

				vector<string> content = word_parse(tmp_string);

				for(auto &word : content){
					string lower_case_word = trans(word);
					insert(root[i], lower_case_word);

					reverse(word.begin(), word.end());
					string lower_case_word2 = trans(word);
					insert(root_reverse[i], lower_case_word2);
				}

			}
			fi.close();
		}else{
			break;
		};
	}
}

void read_query(string data_dir, string query, string output){
	string file, tmp;
	fstream fi;
	vector<string> tmp_string;
	int flag = 0;

	fi.open((query).c_str(), ios::in);

	if(fi.is_open()){

		while(getline(fi, tmp)){
	
			tmp_string = split(tmp, " ");

			for(int i=0; i<=MAX; i++){
				answer_set[i]  =0;
			}
			flag = 0;

			query_judge(tmp_string);

			for(int i=0; i<=MAX; i++){
				if(answer_set[i]){
					write_file(data_dir,query, output,Title_set[i]);
					flag = 1;
				}
			}
			if(!flag) write_file(data_dir,query, output,"Not Found!");
			//cout <<"_____"<< endl;
		}
		fi.close();
	}
}


//----------------------------------------------------------------

int main(int argc, char *argv[])
{
	//clock_t start_time,end_time;
	//start_time = clock();

    string data_dir = argv[1] + string("/");
	string query = string(argv[2]);
	string output = string(argv[3]);

	

	for(int i=0; i<=MAX; i++){
		root[i] = getNode();
		root_reverse[i] = getNode();
	}

	read_data(data_dir, query, output);
	ofs.open(output);
	read_query(data_dir, query, output);

	ofs.close();
	//end_time = clock();
	//cout << (double)((double)(end_time - start_time)/CLOCKS_PER_SEC)<<endl;
	return 0;
}
